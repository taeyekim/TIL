# 1. 그래프를 코드표현
#
#

# - 인접 행렬
#   - V x V 배열을 활용해서 표현
#   - 갈 수 없다면 0, 있다면 1(가중치)을 저장
# - 장점
#   - 노드 간의 연결 정보를 한 방에 확인 가능
#   - 햏렬 곱을 이용하여 탐색이 쉽게 가능하다
#   - 간선이 많을수록 유리
# - 단점
#   - 노드 수가 커지면 메모리가 낭비된다.

# 특징 : 양방향 그래프는
# 중앙 우하닥 대각선 기준으로 대칭 됨.
graph = [
    [0, 1, 0, 1, 0],
    [1, 0, 1, 0, 1],
    [0, 1, 0, 0, 0],
    [1, 0, 0, 0, 1]
    [0, 1, 0, 1, 0]
]
# - 인접 리스트
#   - V 개의 노드가 갈 수 있는 정보만 저장
# - 장점
#   - 메모리 사용량이 적다
#   - 탐새할 때 갈 수 있는 곳만 확인하기 때문에 시간적으로 효율
# - 단점
#   - 특정 노드 간 연결 여부를 확인하는데 시간이 걸린다.
Graph = [
    [1, 3],
    [0, 2, 4],
    [1],
    [0, 4]
    [1, 3]
]

visited = [0] * 5

def dfs(now):
    # 기저 조건

    # 다음 재귀 호출 전
    print(now, end = ' ')

    # 다음 재귀 호출
    # dfs: 현재 노드에서 다른 노드들을 확인
    # 다른 노드들 = 반복문
    for to in range(5):
        # 갈 수 없다면 pass
        if Graph[]

